/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package graphics;

import static graphics.ImageScaler.scaleImage;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.JLabel;
import javax.swing.UnsupportedLookAndFeelException;
import java.awt.AWTException;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Vlad Nicolae
 */
public class AvatarJFrame extends javax.swing.JFrame {

    public AvatarJFrame() {
        initComponents();
    }

    public int getAvatarLabelWidth() {
        return backgroundAvatarBodyLabel.getWidth();
    }

    public int getAvatarLabelHeight() {
        return backgroundAvatarBodyLabel.getHeight();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pricipalPanel = new javax.swing.JPanel();
        mainAvatarLayeredPane = new javax.swing.JLayeredPane();
        backgroundAvatarBodyLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        AccesoriButton = new javax.swing.JButton();
        colorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(getIconImage());
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(1000, 700));
        setResizable(false);

        backgroundAvatarBodyLabel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundAvatarBodyLabel.setForeground(new java.awt.Color(255, 255, 255));
        backgroundAvatarBodyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        backgroundAvatarBodyLabel.setText("Av");
        backgroundAvatarBodyLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        backgroundAvatarBodyLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        backgroundAvatarBodyLabel.setOpaque(true);
        backgroundAvatarBodyLabel.setHorizontalAlignment(JLabel.CENTER);
        backgroundAvatarBodyLabel.setVerticalAlignment(JLabel.CENTER);
        ImageIcon scaledImage = scaleImage("Resources\\Corp.png", 1000, 700);
        backgroundAvatarBodyLabel.setIcon(scaledImage);
        setLayout(new BorderLayout());
        add(backgroundAvatarBodyLabel, BorderLayout.CENTER);

        mainAvatarLayeredPane.setLayer(backgroundAvatarBodyLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout mainAvatarLayeredPaneLayout = new javax.swing.GroupLayout(mainAvatarLayeredPane);
        mainAvatarLayeredPane.setLayout(mainAvatarLayeredPaneLayout);
        mainAvatarLayeredPaneLayout.setHorizontalGroup(
            mainAvatarLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundAvatarBodyLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
        );
        mainAvatarLayeredPaneLayout.setVerticalGroup(
            mainAvatarLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainAvatarLayeredPaneLayout.createSequentialGroup()
                .addComponent(backgroundAvatarBodyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                .addContainerGap())
        );

        saveButton.setText("Save");
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveButtonActionPerformed(evt);
            }
        });

        AccesoriButton.setText("Accesori button");
        AccesoriButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                AccesoriButtonActionPerformed(evt);
            }
        });

        colorButton.setText("jButton1");
        colorButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                colorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pricipalPanelLayout = new javax.swing.GroupLayout(pricipalPanel);
        pricipalPanel.setLayout(pricipalPanelLayout);
        pricipalPanelLayout.setHorizontalGroup(
            pricipalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pricipalPanelLayout.createSequentialGroup()
                .addContainerGap(385, Short.MAX_VALUE)
                .addComponent(mainAvatarLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pricipalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pricipalPanelLayout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pricipalPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(pricipalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colorButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccesoriButton, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pricipalPanelLayout.setVerticalGroup(
            pricipalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pricipalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pricipalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainAvatarLayeredPane)
                    .addGroup(pricipalPanelLayout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(AccesoriButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pricipalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pricipalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        int x = 0;
        int y = 0;
        int width = backgroundAvatarBodyLabel.getWidth();
        int height = backgroundAvatarBodyLabel.getHeight();

        try {
            Point labelLocation = backgroundAvatarBodyLabel.getLocationOnScreen();
            x = labelLocation.x;
            y = labelLocation.y;

            Robot robot = new Robot();
            Rectangle captureRect = new Rectangle(x, y, width, height);
            BufferedImage screenshot = robot.createScreenCapture(captureRect);

            JFileChooser fileChooser = new JFileChooser();

            // Filtru pentru png momentan
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG Images", "png");
            fileChooser.setFileFilter(filter);

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();

                // Verifica daca are png, probabil obsolete
                if (!fileToSave.getAbsolutePath().toLowerCase().endsWith(".png")) {
                    fileToSave = new File(fileToSave.getAbsolutePath() + ".png");
                }

                ImageIO.write(screenshot, "png", fileToSave);

                JOptionPane.showMessageDialog(this, "Salvat");
            }
        } catch (AWTException | IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "A luat foc laptopul");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void AccesoriButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_AccesoriButtonActionPerformed
    {//GEN-HEADEREND:event_AccesoriButtonActionPerformed
  try {
      backgroundAvatarBodyLabel.repaint();
        // Load the existing image
        ImageIcon existingImageIcon = (ImageIcon) backgroundAvatarBodyLabel.getIcon();
        Image existingImage = existingImageIcon.getImage();
ImageIcon originalOverlayIcon = scaleImage("Resources\\accesori.png", getAvatarLabelWidth(), getAvatarLabelHeight());
        BufferedImage originalOverlayImage = imageIconToBufferedImage(originalOverlayIcon);

        // Create a BufferedImage for the modified overlay image
        BufferedImage modifiedOverlayImage = new BufferedImage(getAvatarLabelWidth(), getAvatarLabelHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics overlayGraphics = modifiedOverlayImage.getGraphics();
        overlayGraphics.drawImage(originalOverlayImage, 0, 0, null);
        overlayGraphics.dispose();

        // Replace white pixels with the chosen color only on non-transparent pixels of the modified overlay
        applyColorToOverlay(modifiedOverlayImage);

        // Create a BufferedImage for the combined image
        BufferedImage combinedImage = new BufferedImage(getAvatarLabelWidth(), getAvatarLabelHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics g = combinedImage.getGraphics();

        // Draw the existing image
        g.drawImage(existingImage, 0, 0, null);

        // Draw the modified overlay on top
        g.drawImage(modifiedOverlayImage, 0, 0, null);

        // Set the combined image as an icon for the existing label
        backgroundAvatarBodyLabel.setIcon(new ImageIcon(combinedImage));

        // Dispose of the graphics objects
        g.dispose();
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error overlaying second image");
    }
    }//GEN-LAST:event_AccesoriButtonActionPerformed

    private void colorButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_colorButtonActionPerformed
    {//GEN-HEADEREND:event_colorButtonActionPerformed
          Color newColor = JColorChooser.showDialog(this, "Choose Color", chosenColor);
    if (newColor != null) {
        chosenColor = newColor;

        // Trigger the redraw by simulating a click on the jButton1
        AccesoriButtonActionPerformed(evt);
    }
    }//GEN-LAST:event_colorButtonActionPerformed


    private BufferedImage imageIconToBufferedImage(ImageIcon icon) {
    BufferedImage bufferedImage = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_ARGB);
    Graphics g = bufferedImage.createGraphics();
    icon.paintIcon(null, g, 0, 0);
    g.dispose();
    return bufferedImage;
}
    
    private Color chosenColor = Color.WHITE; 
    
    private void replaceWhitePixels(BufferedImage image) {
    for (int x = 0; x < image.getWidth(); x++) {
        for (int y = 0; y < image.getHeight(); y++) {
            int pixel = image.getRGB(x, y);
            if (pixel == Color.WHITE.getRGB()) {
                image.setRGB(x, y, chosenColor.getRGB());
            }
        }
    }
}
    
    private void applyColorToOverlay(BufferedImage image) {
    for (int x = 0; x < image.getWidth(); x++) {
        for (int y = 0; y < image.getHeight(); y++) {
            int pixel = image.getRGB(x, y);

            // Check if the pixel is not transparent
            if ((pixel >> 24) != 0x00) {
                // Check if the pixel is white
                if ((pixel & 0xFFFFFF) == Color.WHITE.getRGB()) {
                    // Apply the chosen color to non-transparent white pixels
                    image.setRGB(x, y, chosenColor.getRGB());
                }
            }
        }
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            // Set Nimbus Look and Feel
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AvatarJFrame().setVisible(true);
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccesoriButton;
    private javax.swing.JLabel backgroundAvatarBodyLabel;
    private javax.swing.JButton colorButton;
    private javax.swing.JLayeredPane mainAvatarLayeredPane;
    private javax.swing.JPanel pricipalPanel;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

}
